#!/bin/sh
#
# http://github.com/mitchweaver/bin
#
# torrent manager using aria2c
#

# -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
: "${TORRENT_QUEUE_DIR:=${HOME}/.torrents}"   # directory
queue=$TORRENT_QUEUE_DIR/queue                # file to watch
working=$TORRENT_QUEUE_DIR/working            # links currently downloading
completed=$TORRENT_QUEUE_DIR/completed        # where to move on completion
downloading=$TORRENT_QUEUE_DIR/downloading    # where to store during download
scripts=$TORRENT_QUEUE_DIR/scripts            # script that runs on completion
logs=$TORRENT_QUEUE_DIR/logs                  # log files
: "${TORRENT_QUEUE_VPN_KILLSWITCH:=true}"     # whether to allow non-vpn
# -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*

usage() {
>&2 cat <<EOF
Usage:
--------------------------------
[-a]      add a magnet link
[-m]      mass download
[-d]      start daemon
[-q]      stop daemon
[-r]      retry failed downloads
EOF
exit 1
}

check() {
    required='aria2c sed pgrep'
    suggested='detox notify-send'

    for i in $required ; do
        if ! command -v "$i" >/dev/null ; then
            >&2 printf '[Error]: Missing required program: %s\n' "$i"
            exit 1
        fi
    done

    for i in $suggested ; do
        if ! command -v "$i" >/dev/null ; then
            >&2 printf '[Warning]: Missing suggested program: %s\n' "$i"
        fi
    done
}

init() {
    mkdir -p "$TORRENT_QUEUE_DIR" "$completed" \
        "$downloading" "$scripts" "$logs"
    touch "$queue" "$working"
}

sanitize_link() {
    # remove extraneous trackers
    res=${1#*=}
    res=${res#*=}
    res=${res%%udp*}
    res=${res%\&*}

    # convert %20, '+, and '.' to spaces if needed
    printf '%s\n' "$res" | \
    sed -e 's/%20/ /g' -e 's/\+/ /g' -e 's/\./ /g'
}

mkscript() {
    file=$1
    log=$2
    script=$3

    # trim off the tracker elements in the output filename
    output=${file%% \%*}
    output=${output#-}
    output=${output%-}

# create script to be ran at download completion
cat >"$script" <<EOF
#!/bin/sh

mv -f -- "$downloading/$file" "$completed/$output"

# cleanup file names
if command -v detox >/dev/null ; then
    detox "$completed/$output"
fi

# remove junk
rm -f "$log"
find "$completed/$output" -type f \
    -iname '*.aria2' -o \
    -iname '*.nfo' -o \
    -iname '*.info' -o \
    -iname '*.txt' -o \
    -exec rm -f "{}" \;

notify-send "${0##*/}: \"$output\" has finished"

# remove itself when done
rm "$script"
EOF
chmod +x "$script"
}

dl() {
    cd "$downloading" || return 1
    link=$1
    file=$(sanitize_link "$link")
    log=$logs/$file.log

    mkscript "$file" "$log" "$scripts/$file"

    aria2c -d "$downloading/$file" \
        --on-bt-download-complete="$scripts/$file" \
        --disable-ipv6 \
        --enable-dht=true \
        --enable-dht6=false \
        --file-allocation=prealloc \
        --check-integrity=true \
        --continue=true \
        --max-concurrent-downloads=20 \
        --seed-time=0 \
        "$link" >>"$log" 2>&1
}

daemon() {
    while sleep 5 ; do
        if [ "$TORRENT_QUEUE_VPN_KILLSWITCH" = true ] &&
            ! pgrep -x 'openvpn' >/dev/null ; then
                pkill -9 -f aria2c
                continue
        fi
        while [ -s "$queue" ] ; do
            read -r link < "$queue"
            {
                printf '%s\n' "$link" >> "$working"

                dl "$link" || printf '%s\n' "$link" >>"$queue".rej

                sed -i "/$link/d" "$working"
            } &
            sed -i '1d' "$queue"
        done
    done
}

mass_add() {
    tmp=/tmp/$$.${0##*/}
    ${EDITOR:-vi} "$tmp"
    if [ "$tmp" ] ; then
        while read -r url ; do
            add "$url"
        done < "$tmp"
        rm "$tmp"
    fi
}

add() {
    case $1 in
        magnet:*)
            printf '%s\n' "$1" >>"$queue"
            ;;
        *)
            usage
    esac
}

main() {
    check
    init
    case ${1#-} in
        a)
            add "$2"
            ;;
        m|v)
            mass_add
            ;;
        d)
            daemon
            ;;
        r)
            if [ -f "$queue".rej ] ; then
                cat "$queue".rej >> "$queue"
                rm "$queue".rej
            fi
            ;;
        *)
            usage
    esac
}

main "$@"
